#!/bin/bash

configfile=$XDG_CONFIG_HOME/xbacklight-ctl/rc.cfg
[[ -z ${XDG_CONFIG_HOME+x} ]] && configfile=$HOME/.config/xbacklight-ctl/rc.cfg; 

make_config () {
	mkdir -p "${configfile%/*}" 
	printf "PERC=10\\nMAX=100\\nMIN=10\\nTIME=100\\nSTEPS=20\\nNOTIFY=yes\\n" > $configfile
}

[[ -f $configfile ]] || make_config

configfile_secured=/tmp/xbacklight-ctl.cfg

# Check if file contains something that is not a variable
if egrep -q -v '^#|^[^ ]*=[^;]*' "$configfile"; then
	echo "You can only set variables in your rc.cfg" >&2
	# Filter all commands that are not a variable
	egrep '^#|^[^ ]*=[^;&]*'  "$configfile" > "$configfile_secured"
	configfile="$configfile_secured"
fi

source $configfile

usage () {
	echo "Usage: xbacklight-ctl <up [percent]|down [percent]|set percent|max|min|help|-h|--help>"
	echo "Config location: $configfile"
}

set_defaults () {
	[[ -z $MAX ]] && MAX=100
	[[ $MAX -gt 100 ]] && MAX=100

	[[ -z $MIN ]] && MIN=10
	[[ $MIN -lt 0 ]] && MIN=0

	[[ -z $PERC ]] && PERC=10

	[[ -z $TIME ]] && TIME=100
	[[ $TIME -lt 0 ]] && TIME=100

	[[ -z $STEPS ]] && STEPS=20
	[[ $STEPS -lt 0 ]] && STEPS=20

	[[ -z $NOTIFY ]] && NOTIFY=yes
}

perctoprogressbar () {
	[[ -z $1 ]] && echo "Missing percent" && exit 1
	[[ -z $(echo $1 | grep '%$' ) ]] && echo "Put a % at the end" && exit 1
	[[ ${1%\%} -gt 100 ]] && echo "The percent can't be greater than 100%" && exit 1

	char1=${2//[[:blank:]]/}
	char2=${3//[[:blank:]]/}

	[[ -z $char1 ]] && char1="■"
	[[ -z $char2 ]] && char2="□"

	# Integer from 1 to 10
	progress=$(echo $1 | cut -d'%' -f 1 | xargs -I {} echo {}/10 | bc)

	string=""

	while [[ ${#string} -lt 10 ]]; do
	  [[ ${#string} -lt $progress ]] && string+="$char1" || string+="$char2"
	done

	echo "$string $1"
}

quick_notification () {
	NOT_FILE=/tmp/xbacklight-ctl-notification

	notify-send.sh "$1" "$(perctoprogressbar $2)" -u normal -t 500 -i $3 -a xbacklight-ctl --hint=int:transient:1 -R $NOT_FILE
}

notify-error () {
	local str="xbacklight-ctl error: $1"
	echo "$str"
	notify-send "$str"
}

backlight_up () {
	set_defaults

	local PERC=${1:-$PERC}

	local CURR_PERC=`xbacklight | sed "s/\..*//g"`
	[[ $(($CURR_PERC+$PERC)) -gt $MAX ]] && local PERC=$(($MAX-$CURR_PERC))
	local NEW_PERC=$(($CURR_PERC+$PERC))

	quick_notification "Backlight up $PERC%" "$NEW_PERC%" weather-clear
	xbacklight -inc $PERC -time $TIME -steps $STEPS
}

backlight_down () {
	set_defaults

	local PERC=${1:-$PERC}

	local CURR_PERC=`xbacklight | sed "s/\..*//g"`
	[[ $(($CURR_PERC-$PERC)) -lt $MIN ]] && local PERC=$(($CURR_PERC-$MIN))
	local NEW_PERC=$(($CURR_PERC-$PERC))

	quick_notification "Backlight down $PERC%" "$NEW_PERC%" weather-clear-night
	xbacklight -dec $PERC -time $TIME -steps $STEPS
}

backlight_max () {
	set_defaults

	quick_notification "Backlight set to max" "$MAX%" weather-clear
	xbacklight -set $MAX -time $TIME -steps $STEPS
}

backlight_min () {
	set_defaults

	quick_notification "Backlight set to min" "$MIN%" weather-clear-night
	xbacklight -set $MIN -time $TIME -steps $STEPS
}

backlight_set () {
	[[ -z $1 ]] && notify-error "percent not specified" && exit 1
	[[ $1 -gt 100 ]] && notify-error "percent can't be higher than 100%" exit 1

	set_defaults

	quick_notification "Backlight set to" "$1%" weather-clear
	xbacklight -set $1 -time $TIME -steps $STEPS
}

case "$1" in
	up) backlight_up $2;;
	down) backlight_down $2;;
	max) backlight_max;;
	min) backlight_min;;
	set) backlight_set $2;;
	help|-h|--help)
		usage
		exit
	;;
	*) 
		usage 
		exit 1
	;;
esac
